/**
 * @page ttlib TeamTalk Library Setup
 *
 * The TeamTalk C-API DLL is located in the @c Library/TeamTalk_DLL
 * folder of the SDK. This DLL along its .NET wrapper DLL are required
 * when creating a TeamTalk project for .NET framework.
 *
 * The TeamTalk DLL requires Windows 7/8/10 and comes for both 32 and
 * 64-bit architecture.
 *
 * The following sections explain how to set up the TeamTalk DLL so it
 * can be used in a .NET project.
 *
 * - @ref buildnetdll
 * - @ref vssetup
 *
 * @section buildnetdll Build managed TeamTalk DLL wrapper
 *
 * The TeamTalk .NET DLL is built using the Visual Studio
 * project located in the @c "Library/TeamTalk.NET" folder of the
 * SDK.
 *
 * The TeamTalk .NET DLL simply wraps the C-API DLL so .NET developers
 * don't have to deal with messy native code calls.
 *
 * Since the .NET DLL is a wrapper for the C-API DLL the TeamTalk
 * C-API DLL must also be included with the .NET DLL. The TeamTalk
 * C-API DLL is located in @c Library/TeamTalk_DLL folder.
 *
 * @section vssetup Visual Studio Setup
 * 
 * This section shows how to set up Visual Studio (VS) to use the
 * TeamTalk .NET DLL in a VS-project. The .NET DLL contains native
 * code and it is therefore important to configure the VS-project to
 * be aware of this. The following image shows what needs to be
 * configured in VS:
 *
 * @image html vssetup.png "Visual Studio Project Setup"
 *
 * If the PC used for developing the user application is running
 * Windows x64 and the developer wants to use the x86 .NET DLL the
 * project must be configured to run as an x86
 * application. Item @b 1 in the picture above shows where to to
 * this. Simply open the "Configuration Manager", add the x86
 * configuration and set it as the active Platform.
 *
 * Next the @c TeamTalk.NET.dll must be added as a reference to
 * the project. Item @b 2 shows where to do this. When the "Add
 * Reference" dialog opens click the "Browse"-tab and find the @c
 * TeamTalk5.NET.dll file. The list of references will now
 * contain @c TeamTalk.NET as is seen in item @b 3.
 *
 * Last we need to set the working directory so the TeamTalk
 * native DLLs can be loaded. This is done by clicking Properties
 * for the project and setting the "Working directory" in the
 * Debug-tab as shown below:
 *
 * @image html vsworkdir.png "Setting the working directory"
 *
 * To check that everything is now in working order try adding the
 * following code to the Windows Form application's contructor and
 * run the application:
@code
namespace WindowsApplication1
{
    public partial class Form1 : Form
    {
        BearWare.TeamTalkBase ttclient;

        public Form1()
        {
            InitializeComponent();
            
            // Instantiate a TeamTalk client in the TeamTalk 5 SDK Standard Edition.

            ttclient = new BearWare.TeamTalk5(false); // we pass 'false' since 
                                                      // we're a Forms application

            // In TeamTalk 5 Professional Edition the TeamTalk client instance is created
            // using: 'ttclient = new BearWare.TeamTalk5Pro(false);

        }
    }
}
@endcode
 *
 * Hopefully the application now starts without any errors. If an
 * exception occurs about missing dependencies then ensure that the
 * application is able to load the TeamTalk client's DLL file,
 * i.e. ensure the working directory is correct.
 *
 * If the above application starts then move on to section @ref
 * stepbystep to see how to use the TeamTalk client DLL.
 *
 */
