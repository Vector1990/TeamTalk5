/**
 * @page ttlib TeamTalk Library Setup
 *
 * The TeamTalk C-API DLL is located in the @c Library/TeamTalk_DLL
 * folder of the SDK. This DLL along with its JNI wrapper DLL are
 * required when creating a TeamTalk project for Java.
 *
 * The following sections explain how to set up the TeamTalk DLL so it
 * can be used in a Java project.
 *
 * - @ref teamtalkjni
 *
 * @section teamtalkjni TeamTalkJNI project
 *
 * All TeamTalk's projects for Java depend on the @b TeamTalkJNI
 * project located in @c Library/TeamTalkJNI.
 *
 * The TeamTalkJNI project contains the following wrapper classes for
 * the TeamTalk JNI DLL:
 *
 * - @c dk.bearware.TeamTalk5
 *   - Valid for TeamTalk 5 Standard Edition
 * - @c dk.bearware.TeamTalk5Pro
 *   - Valid for TeamTalk 5 Professional Edition
 * - @c dk.bearware.TeamTalk5Srv
 *   - Valid for TeamTalk 5 Professional Edition
 *
 * When a method is invoked on one of the wrapper classes then the JVM
 * translates this method call to a function in the TeamTalk JNI DLL.
 *
 * @subsection buildjnidll Build TeamTalk JNI DLL
 *
 * On Linux, Mac OS X and Windows the TeamTalk JNI DLL can be built
 * manually using a GCC compatible compiler. The TeamTalk JNI DLL
 * wraps the TeamTalk C-API DLL, so both DLLs are required by your
 * application.
 *
 * Note that Android comes with a prebuilt TeamTalk JNI wrapper,
 * therefore this step is unnescessary.
 *
 * To build TeamTalk JNI DLL go to the folder @c
 * Library/TeamTalkJNI and run @c make. Follow the instructions
 * by the Makefile on what to build for your platform. Note that
 * building the JNI wrapper requires that the Java SDK is installed
 * and that jni.h is in the compiler's include path.
 *
 * Also build the TeamTalk Java classes located in the TeamTalkJNI
 * @c src folder. These Java wrapper classes can be built into a JAR
 * file using the instructions in the Makefile.
 *
 * When running an application which uses the TeamTalk DLL (and JNI
 * DLL) on Windows ensure that the DLL is in the working directory of
 * the application. On Mac OS X the directory of the DLL (shared
 * object) must be in the @c DYLD_LIBRARY_PATH environment
 * variable. On Linux the directory of the DLL (shared object) must be
 * in the @c LD_LIBRARY_PATH environment variable.
 *
 */
